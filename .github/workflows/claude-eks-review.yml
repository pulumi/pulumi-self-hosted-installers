name: Claude EKS Review

on:
  pull_request:
    paths: ['eks-hosted/**']
    types: [opened, synchronize]

jobs:
  claude-eks-review:
    if: |
      github.event.pull_request.user.login != 'dependabot[bot]' &&
      github.event.pull_request.user.login != 'pulumi-renovate[bot]' &&
      github.event.pull_request.user.login != 'pulumi-bot'
    
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      issues: read
      id-token: write
    
    # Add concurrency limiting
    concurrency:
      group: claude-eks-review-${{ github.event.pull_request.number }}
      cancel-in-progress: true
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 1
          sparse-checkout: |
            .github
            eks-hosted

      - name: Run Claude EKS Code Review
        id: claude-eks-review
        uses: anthropics/claude-code-action@beta
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          timeout_minutes: 5
          direct_prompt: |
            Please review this pull request for the Pulumi Self-Hosted Installers repository (max 5 words per step). Focus on:
            
            **SCOPE LIMITATION:**
            Focus ONLY on changes in eks-hosted/** directory.
            This is the 8-stage AWS EKS microstack deployment architecture.
            
            **Pulumi Infrastructure-as-Code Best Practices:**
            - Proper resource naming conventions and tagging
            - Stack references and output handling between deployment stages
            - Configuration management (Pulumi.*.yaml files)
            - Provider version consistency and updates
            
            **EKS-Specific Considerations:**
            - AWS EKS configurations, node groups, and cluster settings
            - IAM policies and service accounts (01-iam stage)
            - VPC networking and security groups (02-networking stage)
            - EKS cluster setup and worker nodes (05-eks-cluster stage)
            - Ingress controllers and cluster services (10-cluster-svcs stage)
            - State management and policies (15-state-policies-mgmt stage)
            - RDS/Aurora database configuration (20-database stage)
            - OpenSearch insights setup (25-insights stage)
            - ESC configuration (30-esc stage)
            - Pulumi service deployment (90-pulumi-service stage)
            - Multi-stage deployment dependencies and numbered ordering
            
            **Security & Production Readiness:**
            - Secret management and encryption at rest
            - Network security (private endpoints, ingress/egress rules)
            - Certificate management and TLS configuration
            - RBAC and service account permissions
            - Bring-your-own (BYO) infrastructure compatibility
            
            **Code Quality:**
            - TypeScript idioms and error handling
            - Resource cleanup and lifecycle management
            - Documentation updates (README.md, architecture diagrams)
            - Test coverage for integration tests
            - Mermaid diagram accuracy and enterprise styling standards
            
            **EKS Deployment Patterns:**
            - Validate numbered stage dependencies are maintained (01→02→05→10→15→20→25→30→90)
            - Check for breaking changes in component interfaces
            - Ensure backwards compatibility with existing EKS deployments
            - ALB ingress controller configuration
            - EKS-specific networking and security patterns
            
            Be constructive and focus on production EKS deployment reliability.