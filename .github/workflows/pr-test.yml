permissions: write-all # Equivalent to default permissions plus id-token: write
env:
  ESC_ACTION_OIDC_AUTH: true
  ESC_ACTION_OIDC_ORGANIZATION: pulumi
  ESC_ACTION_OIDC_REQUESTED_TOKEN_TYPE: urn:pulumi:token-type:access_token:organization
  ESC_ACTION_ENVIRONMENT: github-secrets/pulumi-pulumi-self-hosted-installers
  ESC_ACTION_EXPORT_ENVIRONMENT_VARIABLES: false
on:
  pull_request: null
name: PR test

jobs:
  test:
    if: |
      github.event.pull_request.user.login != 'dependabot' &&
      github.event.pull_request.user.login != 'dependabot[bot]' &&
      github.event.pull_request.user.login != 'pulumi-renovate' &&
      github.event.pull_request.user.login != 'pulumi-renovate[bot]' &&
      github.event.pull_request.user.login != 'pulumi-bot'

    runs-on: ubuntu-latest

    steps:
      - name: Fetch secrets from ESC
        id: esc-secrets
        uses: pulumi/esc-action@cf5b30703ffd5ad60cc3a880c09b3a9592b9372d # v1
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

      - name: Login to Docker Hub as pulumi-bot
        uses: docker/login-action@184bdaa0721073962dff0199f1fb9940f07167d1 # v3
        with:
          username: ${{ steps.esc-secrets.outputs.DOCKERHUB_USERNAME }}
          password: ${{ steps.esc-secrets.outputs.DOCKERHUB_PASSWORD }}

      - uses: ./.github/actions/run-self-hosted
        timeout-minutes: 2
        env:
          # When regenerating the license, create a restricted license.
          # That is, create a license that has a max unit of just 1 unless
          # otherwise required.
          PULUMI_LICENSE_KEY: ${{ steps.esc-secrets.outputs.PULUMI_LICENSE_KEY }}
        with:
          compose-args: '-f ./quickstart-docker-compose/all-in-one/docker-compose.yml'

      - name: Upload service log as artifact
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
        if: ${{ always() }}
        with:
          name: service-log
          path: ${{ env.SERVICE_LOG }}
          overwrite: true
