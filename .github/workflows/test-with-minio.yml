on:
  pull_request:

name: Test Minio as object storage

jobs:
  test:

    runs-on: ubuntu-latest
    env:
      AWS_REGION: "us-west-2"
      # The fake access keys used to configure the Minio container.
      # We will use these keys as the AWS access keys so that the
      # Pulumi service can connect to the Minio storage service.
      MINIO_ACCESS_KEY: "minio-access-key"
      MINIO_SECRET_KEY: "minio-secret-key"
      MINIO_HOST: "minio:9000"
      MINIO_BUCKET_NAME: "pulumi-checkpoints"
      MINIO_PP_BUCKET_NAME: "pulumi-policy-packs"

    steps:
      - uses: actions/setup-go@v2
        with:
          go-version: '~1.16.0'

      - uses: actions/setup-node@v2
        with:
          node-version: '14'

      - name: Checkout pulumi/pulumi-ee
        uses: actions/checkout@v2

      - name: Login to Docker Hub as pulumi-bot
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Run Minio
        run: |
          mkdir -p "${RUNNER_TEMP}/minio-persistence"
          docker run -d --name minio \
              --publish 9000:9000 \
              --volume ${RUNNER_TEMP}/minio-persistence:/data \
              --env MINIO_ACCESS_KEY="${MINIO_ACCESS_KEY}" \
              --env MINIO_SECRET_KEY="${MINIO_SECRET_KEY}" \
          bitnami/minio:latest

          # Wait until Minio starts up fully.
          sleep 5s

          docker logs minio

          echo "127.0.0.1 minio" | sudo tee -a /etc/hosts

      - name: Create Minio buckets
        run: |
          # https://docs.min.io/docs/minio-client-quickstart-guide.html
          wget -q https://dl.min.io/client/mc/release/linux-amd64/mc
          chmod +x mc

          # Create a new alias called minio for our Minio container.
          ./mc alias set minio "http://${MINIO_HOST}" "${MINIO_ACCESS_KEY}" "${MINIO_SECRET_KEY}"

          # Create the bucket using the minio alias.
          ./mc mb "minio/${MINIO_BUCKET_NAME}"
          ./mc mb "minio/${MINIO_PP_BUCKET_NAME}"

      - name: Configure Minio network
        run: |
          # Connect Minio to the pulumi-ee docker network.
          docker network create pulumi-ee
          docker network connect pulumi-ee minio

      - uses: ./.github/actions/run-self-hosted
        timeout-minutes: 2
        with:
          compose-args: '-f ./all-in-one/docker-compose.yml -f ./all-in-one/docker-compose.edge.yml'
        env:
          # When regenerating the license, create a restricted license.
          # That is, create a license that has a max unit of just 1 unless
          # otherwise required.
          PULUMI_LICENSE_KEY: ${{ secrets.PULUMI_LICENSE_KEY }}
          # The only AWS resource the service will access is the Minio container
          # so we map its keys as the AWS keys for the service.
          AWS_ACCESS_KEY_ID: ${{ env.MINIO_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ env.MINIO_SECRET_KEY }}
          PULUMI_CHECKPOINT_BLOB_STORAGE_ENDPOINT: "s3://${{ env.MINIO_BUCKET_NAME }}?endpoint=${{ env.MINIO_HOST }}&disableSSL=true&s3ForcePathStyle=true"
          PULUMI_POLICY_PACK_BLOB_STORAGE_ENDPOINT: "s3://${{ env.MINIO_PP_BUCKET_NAME }}?endpoint=${{ env.MINIO_HOST }}&disableSSL=true&s3ForcePathStyle=true"

      - name: Run integration tests
        run: go test ./tests/.. -v

      - name: Upload service log as artifact
        uses: actions/upload-artifact@v1.0.0
        if: ${{ always() }}
        with:
          name: service-log
          path: ${{ env.SERVICE_LOG }}
