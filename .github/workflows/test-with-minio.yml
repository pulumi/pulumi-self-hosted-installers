permissions: write-all # Equivalent to default permissions plus id-token: write
env:
  ESC_ACTION_OIDC_AUTH: true
  ESC_ACTION_OIDC_ORGANIZATION: pulumi
  ESC_ACTION_OIDC_REQUESTED_TOKEN_TYPE: urn:pulumi:token-type:access_token:organization
  ESC_ACTION_ENVIRONMENT: github-secrets/pulumi-pulumi-self-hosted-installers
  ESC_ACTION_EXPORT_ENVIRONMENT_VARIABLES: false
# workflow_dispatch allows for manual triggering from the GitHub Actions UI, as well
# as the API. repository_dispatch allows us to trigger multiple workflows that
# match on an event_type parameter when triggered via an API call.
# https://docs.github.com/en/actions/reference/events-that-trigger-workflows
on:
  pull_request: null
  workflow_dispatch: null
  repository_dispatch:
    types: [integration_tests]

name: Test Minio as object storage

jobs:
  minio-test:
    if: |
      github.event.pull_request.user.login != 'dependabot' &&
      github.event.pull_request.user.login != 'dependabot[bot]' &&
      github.event.pull_request.user.login != 'pulumi-renovate' &&
      github.event.pull_request.user.login != 'pulumi-renovate[bot]' &&
      github.event.pull_request.user.login != 'pulumi-bot'

    runs-on: ubuntu-latest
    env:
      # The fake access keys used to configure the Minio container.
      # We will use these keys as the AWS access keys so that the
      # Pulumi service can connect to the Minio storage service.
      MINIO_ROOT_USER: "minio-access-key"
      MINIO_ROOT_PASSWORD: "minio-secret-key"
      MINIO_HOST: "minio:9000"
      MINIO_BUCKET_NAME: "pulumi-checkpoints"
      MINIO_PP_BUCKET_NAME: "pulumi-policy-packs"
      ESC_ACTION_EXPORT_ENVIRONMENT_VARIABLES: PULUMI_LICENSE_KEY

    steps:
      - name: Fetch secrets from ESC
        id: esc-secrets
        uses: pulumi/esc-action@cf5b30703ffd5ad60cc3a880c09b3a9592b9372d # v1
      - name: Set env vars
        run: |
          # There doesn't seem to be a way to map environment variables into other enviroments
          # when these are also defined in the same place as the ones they depend on.
          # So set those env vars using:
          # https://docs.github.com/en/actions/reference/workflow-commands-for-github-actions#setting-an-environment-variable

          # The only AWS resource the service will access is the Minio container
          # so we map its keys as the AWS keys for the service.
          echo "AWS_REGION=us-west-2" >> $GITHUB_ENV
          echo "AWS_ACCESS_KEY_ID=${MINIO_ROOT_USER}" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=${MINIO_ROOT_PASSWORD}" >> $GITHUB_ENV

          checkpoint_endpoint="s3://${MINIO_BUCKET_NAME}?endpoint=${MINIO_HOST}&disableSSL=true&s3ForcePathStyle=true"
          pp_endpoint="s3://${MINIO_PP_BUCKET_NAME}?endpoint=${MINIO_HOST}&disableSSL=true&s3ForcePathStyle=true"
          echo "PULUMI_CHECKPOINT_BLOB_STORAGE_ENDPOINT=${checkpoint_endpoint}" >> $GITHUB_ENV
          echo "PULUMI_POLICY_PACK_BLOB_STORAGE_ENDPOINT=${pp_endpoint}" >> $GITHUB_ENV

      - uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5
        with:
          go-version: 1.22

      - uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4
        with:
          node-version: '18'

      - name: Checkout pulumi/pulumi-self-hosted-installers
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

      - name: Login to Docker Hub as pulumi-bot
        uses: docker/login-action@184bdaa0721073962dff0199f1fb9940f07167d1 # v3
        with:
          username: ${{ steps.esc-secrets.outputs.DOCKERHUB_USERNAME }}
          password: ${{ steps.esc-secrets.outputs.DOCKERHUB_PASSWORD }}

      - name: Run Minio
        run: |
          mkdir -p "${RUNNER_TEMP}/minio-persistence"
          docker run -d --name minio \
              --publish 9000:9000 \
              --volume ${RUNNER_TEMP}/minio-persistence:/data \
              --env MINIO_ROOT_USER="${MINIO_ROOT_USER}" \
              --env MINIO_ROOT_PASSWORD="${MINIO_ROOT_PASSWORD}" \
          bitnami/minio:latest

          # Wait until Minio starts up fully.
          sleep 20s

          docker logs minio

          echo "127.0.0.1 minio" | sudo tee -a /etc/hosts

      - name: Create Minio buckets
        run: |
          # https://docs.min.io/docs/minio-client-quickstart-guide.html
          wget -q https://dl.min.io/client/mc/release/linux-amd64/mc
          chmod +x mc

          # Create a new alias called minio for our Minio container.
          ./mc alias set minio "http://${MINIO_HOST}" "${MINIO_ROOT_USER}" "${MINIO_ROOT_PASSWORD}"

          # Create the bucket using the minio alias.
          ./mc mb "minio/${MINIO_BUCKET_NAME}"
          ./mc mb "minio/${MINIO_PP_BUCKET_NAME}"

      - name: Configure Minio network
        run: |
          # Connect Minio to the pulumi-self-hosted-installers docker network.
          docker network create pulumi-self-hosted-installers
          docker network connect pulumi-self-hosted-installers minio

      - uses: ./.github/actions/run-self-hosted
        timeout-minutes: 5
        with:
          compose-args: '-f ./quickstart-docker-compose/all-in-one/docker-compose.yml -f ./quickstart-docker-compose/all-in-one/docker-compose.edge.yml'

      - name: Run integration tests
        run: go test ./quickstart-docker-compose/tests/... -v --tags=minio

      - name: Upload service log as artifact
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
        if: ${{ always() }}
        with:
          name: service-log
          path: ${{ env.SERVICE_LOG }}
          overwrite: true
