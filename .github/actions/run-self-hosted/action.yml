name: 'Run Self-Hosted Pulumi Service'
description: 'Runs the all-in-one version of the quickstart solution.'
# Note: Inputs need to be explicitly mapped into the environment
# of each step where it is needed.
# https://github.com/actions/runner/issues/665
inputs:
  compose-args:
    description: 'Args to pass to the docker-compose command in run-ee.sh'
    required: true
    default: '-f ./all-in-one/docker-compose.yml'
runs:
  using: "composite"
  steps:
    - name: Remove override files
      shell: bash
      run: |
        rm *.override.yml
        rm -r **/*.override.yml

    - name: Run all-in-one
      shell: bash
      run: |
        # NOTE: If the service or console emit secrets
        # we would accidentally reveal that in plaintext when the logs
        # are uploaded as a build artifact later in this workflow.
        # Right now the service and the console use default configuration
        # in this setup. So they don't have any secrets aside from the license
        # key, which is not emitted by the service.
        #
        # Create a temp file for logs.
        SERVICE_LOG=$(mktemp)

        # Make the SERVICE_LOG available to later steps in the workflow.
        # Access it as ${{ env.SERVICE_LOG }}
        echo "SERVICE_LOG=${SERVICE_LOG}" >> $GITHUB_ENV

        # Do not add quotes around $COMPOSE_ARGS as it interferes with the args being
        # spread out.
        echo "Running Docker Compose with args ${COMPOSE_ARGS}..."
        ./scripts/run-ee.sh ${COMPOSE_ARGS} > "${SERVICE_LOG}" 2>&1 &
      env:
        COMPOSE_ARGS: ${{ inputs.compose-args }}

    - name: Wait for services to start
      shell: bash
      run: |
        printf "API Service "
        until $(curl --output /dev/null --silent http://localhost:8080/api/status); do
            printf '.'
            sleep 1
        done
        echo ""

        printf "Console Backend "
        until $(curl --output /dev/null --silent http://localhost:3000/index.html); do
            printf '.'
            sleep 1
        done
        echo ""
